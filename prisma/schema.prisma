datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String? @unique
  image    String  @default("https://as2.ftcdn.net/v2/jpg/03/49/49/79/1000_F_349497933_Ly4im8BDmHLaLzgyKg2f2yZOvJjBtlw5.jpg")
  password String?
  role     String  @default("user")

  token ResetPasswordToken?

  accounts Account[]
  sessions Session[]
  orders   Order[]
  carts    Cart[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poster {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  image String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  category String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  slug        String   @unique
  name        String
  description String
  price       Float
  images      String[]
  stock       Int
  purchesed   Int      @default(0)
  brand       String?
  material    String?
  style       String?
  size        String[] @default([])
  model       String?
  colors      String[] @default([])
  location    String?
  type        String   @default("SELL")

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  carts          CartOnProduct[]
  ProductOnOrder ProductOnOrder[]
  comments       Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  products CartOnProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartOnProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  productId String  @db.ObjectId
  size      String?
  color     String?
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId   String           @db.ObjectId
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  address  String?
  city     String?
  country  String?
  postal   String?
  methode  String           @default("cod")
  status   String           @default("pending")
  date     DateTime         @default(now())
  products ProductOnOrder[]
  evidance Evidance?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evidance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  img     String
  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOnOrder {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  size     String?
  color    String?
  quantity Int

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String   @db.ObjectId
  rating    Rating?

  @@unique([productId, authorId])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @unique @db.ObjectId
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rating    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPasswordToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}
